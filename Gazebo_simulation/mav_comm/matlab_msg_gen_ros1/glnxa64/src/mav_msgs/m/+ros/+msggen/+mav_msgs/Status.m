
classdef Status < ros.Message
    %Status MATLAB implementation of mav_msgs/Status
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mav_msgs/Status' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'e191265664a5f7c1871338dc13be0958' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'VehicleName' 'VehicleType' 'BatteryVoltage' 'RcCommandMode' 'CommandInterfaceEnabled' 'FlightTime' 'SystemUptime' 'CpuLoad' 'MotorStatus' 'InAir' 'GpsStatus' 'GpsNumSatellites' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'vehicle_name' 'vehicle_type' 'battery_voltage' 'rc_command_mode' 'command_interface_enabled' 'flight_time' 'system_uptime' 'cpu_load' 'motor_status' 'in_air' 'gps_status' 'gps_num_satellites' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        RCCOMMANDATTITUDE = 'attitude_thrust';
        RCCOMMANDATTITUDEHEIGHT = 'attitude_height';
        RCCOMMANDPOSITION = 'position';
        MOTORSTATUSRUNNING = 'running';
        MOTORSTATUSSTOPPED = 'stopped';
        MOTORSTATUSSTARTING = 'starting';
        MOTORSTATUSSTOPPING = 'stopping';
        GPSSTATUSLOCK = 'lock';
        GPSSTATUSNOLOCK = 'no_lock';
    end
    properties
        Header
        VehicleName
        VehicleType
        BatteryVoltage
        RcCommandMode
        CommandInterfaceEnabled
        FlightTime
        SystemUptime
        CpuLoad
        MotorStatus
        InAir
        GpsStatus
        GpsNumSatellites
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Header')
            obj.Header = val;
        end
        function set.VehicleName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'VehicleName');
            obj.VehicleName = char(val);
        end
        function set.VehicleType(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'VehicleType');
            obj.VehicleType = char(val);
        end
        function set.BatteryVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'BatteryVoltage');
            obj.BatteryVoltage = single(val);
        end
        function set.RcCommandMode(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'RcCommandMode');
            obj.RcCommandMode = char(val);
        end
        function set.CommandInterfaceEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'CommandInterfaceEnabled');
            obj.CommandInterfaceEnabled = logical(val);
        end
        function set.FlightTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'FlightTime');
            obj.FlightTime = single(val);
        end
        function set.SystemUptime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'SystemUptime');
            obj.SystemUptime = single(val);
        end
        function set.CpuLoad(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'CpuLoad');
            obj.CpuLoad = single(val);
        end
        function set.MotorStatus(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'MotorStatus');
            obj.MotorStatus = char(val);
        end
        function set.InAir(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'InAir');
            obj.InAir = logical(val);
        end
        function set.GpsStatus(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'GpsStatus');
            obj.GpsStatus = char(val);
        end
        function set.GpsNumSatellites(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'GpsNumSatellites');
            obj.GpsNumSatellites = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mav_msgs.Status.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mav_msgs.Status(strObj);
        end
    end
end
